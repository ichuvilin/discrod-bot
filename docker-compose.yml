version: '3.7'

services:
  bot:
    build:
      context: .
      dockerfile: Dockerfile
    image: discord-bot:latest
    container_name: "bot"
    ports:
      - "8080:8080"
    environment:
      - DISCORD_BOT_TOKEN=${TOKEN}
      - YT_EMAIL=${EMAIL}
      - YT_PASSWORD=${PASSWORD}
    volumes:
      - bot_logs:/app/log/
    networks:
      monitoring:
        aliases:
          - bot
  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.4
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "2181" ]
      interval: 10s
      timeout: 3s
      retries: 3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
  kafka:
    image: confluentinc/cp-kafka:6.2.4
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "29092:29092"
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "9092" ]
      interval: 10s
      timeout: 3s
      retries: 3
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: OUTSIDE://:29092,INTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: OUTSIDE://localhost:29092,INTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8081:8080"
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
  grafana:
    build: './config/grafana'
    container_name: "grafana"
    ports:
      - "3000:3000"
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      monitoring:
        aliases:
          - grafana
  prometheus:
    image: prom/prometheus
    container_name: "prometheus"
    user: root
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus:/prometheus
    networks:
      monitoring:
        aliases:
          - prometheus

  # Elasticsearch service
  es-node-01:
    container_name: es-node-01
    ports:
      - '9200:9200'
      - '9300:9300'
    environment:
      - discovery.type=single-node
    image: 'docker.elastic.co/elasticsearch/elasticsearch:7.17.0'
    networks:
      - monitoring
  # Kibana service
  kibana-01:
    container_name: kibana-01
    ports:
      - '5601:5601'
    environment:
      - 'ELASTICSEARCH_HOSTS=http://es-node-01:9200'
    image: 'docker.elastic.co/kibana/kibana:7.17.0'
    healthcheck:
      test: [ "CMD", "curl", "-f", "kibana-01:5601" ]
      interval: 50s
      timeout: 50s
      retries: 5
    depends_on:
      - es-node-01
    networks:
      - monitoring
  # Logstash service
  logstash:
    container_name: logstash-01
    volumes:
      - ./config/elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./config/elk/logstash.yaml:/usr/share/logstash/config/logstash.yml:ro
    image: 'docker.elastic.co/logstash/logstash:7.16.3'
    depends_on:
      kibana-01:
        condition: service_healthy
    networks:
      - monitoring

  # Filebeat service
  filebeat:
    user: root
    container_name: filebeat-01
    command: --strict.perms=false
    volumes:
      - ./config/elk/filebeat.docker.yaml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    image: 'docker.elastic.co/beats/filebeat:7.16.3'
    depends_on:
      kibana-01:
        condition: service_healthy
    networks:
      - monitoring
networks:
  monitoring:
volumes:
  bot_logs: